# PEG-like + BNF-like grammar, used only for reference

# () is a group
# ..+ to match at least one or more
# ..* to match at least zero or more
# | or
# ? optional
# ".." a terminal symbol / token
# identifier an... identifier

outer-statements        = (outer-statement "\n"+)*
outer-statement         = variable-declaration |
                          list-declaration     |
                          map-declaration      |
                          event

list-declaration        = "list" "<" primitive-types ">" identifier
map-declaration         = "map" "<" primitive-types ">" identifier
variable-declaration    = primitive-types identifier ("=" expression)?

primitive-types         = "number" | "string" | "boolean"

event                   = identifier ("." identifier)? "{" inner-statements "}"

inner-statements        = ("\n"+ inner-statement "\n"+)* "\n"*
inner-statement         = compound-statements | simple-statements

simple-statements       = variable-assignment |
                          if-statement |
                          repeat-statement |
                          forever-statement |
                          "break" |
                          "continue"

variable-assignment     = identifier "=" expression

if-statement            = "if" expression "{" inner-statements "}"
                          ("else" "{" inner-statements "}")?

repeat-statement        = "repeat" expression "{" inner-statements "}"

forever-statement       = "forever" "{" inner-statements "}"

expression              = boolean-expression |
                          atom

boolean-expression      = boolean-expression ("&&" | "||") comparison-expression
                          comparison-expression

comparison-expression   = "!" comparison-expression |
                          comparison-expression (">" | "<" | "==" | ">=" | "<=") arithmetic-expression |
                          arithmetic-expression

arithmetic-expression   = arithmetic-expression "+" term |
                          arithmetic-expression "-" term |
                          term

term                    = term "*" factor |
                          term "/" factor |
                          factor

factor                  = "+" factor |
                          "-" factor |
                          power

// right precedence
power                   = primary ("**" power)?

primary                 = primary "." identifier |
                          primary name "[" expression "]" |
                          (primary ".")? identifier "(" arguments? ")" |
                          atom

arguments               = expression ("," expression)* ","? # trailing comma

atom                    = identifier |
                          "true" |
                          "false" |
                          string |
                          number